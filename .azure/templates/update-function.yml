parameters:
  - name: appName
    type: string
  - name: parametersFileName
    type: string
  - name: workingDir
    type: string
    default: '$(Pipeline.Workspace)/github'

steps:

  - task: FuncToolsInstaller@0
    displayName: Install the latest Azure Function Tools
    inputs:
      version: 'latest'

  - task: ArchiveFiles@2
    displayName: "Archive files"
    inputs:
      rootFolderOrFile: ${{ parameters.workingDir }}
      includeRootFolder: false
      archiveFile: '$(System.DefaultWorkingDirectory)/build/$(Build.BuildId).zip'

  - task: AzureCLI@2
    displayName: Read variables from ${{ parameters.parametersFileName }}
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $envStr = ""
        $variables = Get-Content /home/vsts/work/1/github/.azure/${{ parameters.parametersFileName }} | ConvertFrom-Json -AsHashtable
        $appName = "${{ parameters.appName }}"
        $envVariables = $variables.parameters.environmentVariables.value
        $secretNames = $variables.parameters.secretNames.value

        $keyVaultName = (az webapp config appsettings list --name $appName -g $appName -o json | convertfrom-json | Where-Object{$_.value -match "@Microsoft"})

        if ($keyVaultName.length -gt 0) {
            $keyVaultName = $keyVaultName[0].value -split "VaultName="
            if ($keyVaultName.length -gt 0) {
                $keyVaultName = ($keyVaultName[1] -split ";")[0]
            }
        }
        if ($keyVaultName.length -eq 0) {
          $keyVaultName = $appName -replace("-", "")
        }

        foreach ($env in $envVariables.getenumerator()) { 
          $value = $env.value
          try {
            $value = $env.value.replace('"','\"')
          } catch {}
          $envStr += '"{0}={1}" ' -f $env.name,$value
        }

        foreach ($secretName in $secretNames) {
          $value = "@Microsoft.KeyVault(VaultName=$($keyVaultName);SecretName=$($secretName -replace '_', '-'))"
          $envStr += '"{0}={1}" ' -f $secretName,$value
        }
        
        Write-Host "##vso[task.setvariable variable=envStr]$envStr"
  - script: echo $funcEnv
    env: 
      funcEnv: $(envStr)

  - task: AzureFunctionApp@1
    displayName: Update function app ${{ parameters.appName }}
    inputs:
      azureSubscription: $(azureServiceConnection)
      appType: functionAppLinux
      appName: ${{ parameters.appName }}
      package: $(System.DefaultWorkingDirectory)/build/*.zip
      deploymentMethod: 'auto'
      appSettings: $(envStr)